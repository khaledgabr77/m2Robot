#! /usr/bin/env python

PACKAGE='umrr_driver'
import roslib
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#       Name       Type      Level Description                Default Min   Max
gen.add("filter_height",  bool_t,   0,    "Enable height filtering.",  False)
gen.add("height_min",       double_t,    0,    "Filter targets that are lower than value [m].",          -5,      -5, 20)
gen.add("height_max",       double_t,    0,    "Filter targets that are higher than value [m].",          20,      -5, 20)
gen.add("filter_rcs",  bool_t,   0,    "Enable rcs filtering.",  False)
gen.add("rcs_min",       double_t,    0,    "Minimal size in [dB].",          0,      -5, 50)
gen.add("rcs_max",       double_t,    0,    "Maximum size in [dB].",          50,      0, 50)
gen.add("filter_speed",  bool_t,   0,    "Enable speed filtering.",  False)
gen.add("speed_min",       double_t,    0,    "Speed incoming targets [m/s].",          -111,      -111, 0)
gen.add("speed_max",       double_t,    0,    "Speed leaving targets [m/s].",          56,      0, 56)
gen.add("filter_range",  bool_t,   0,    "Enable range filtering.",  False)
gen.add("range_min",       double_t,    0,    "Min Range in [m].",          0,      0, 175)
gen.add("range_max",       double_t,    0,    "Max Range in [m]..",          175,      0, 175)
gen.add("filter_azimuth",  bool_t,   0,    "Enable azimuth filtering.",  False)
gen.add("FOV_left",       double_t,    0,    "Left angle in deg",          90,      0, 90)
gen.add("FOV_right",       double_t,    0,    "Right angle in deg",          -90,      -90, 0)
gen.add("filter_elevation",  bool_t,   0,    "Enable elevation filtering.",  False)
gen.add("FOV_top",       double_t,    0,    "Top angle in deg",          90,      0, 90)
gen.add("FOV_bottom",       double_t,    0,    "Bottom angle in deg",          -90,      -90, 0)


exit(gen.generate(PACKAGE, "pc2_filter", "pc2filter"))
